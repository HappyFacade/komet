/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * You may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributions from 2013-2017 where performed either by US government 
 * employees, or under US Veterans Health Administration contracts. 
 *
 * US Veterans Health Administration contributions by government employees
 * are work of the U.S. Government and are not subject to copyright
 * protection in the United States. Portions contributed by government 
 * employees are USGovWork (17USC ยง105). Not subject to copyright. 
 * 
 * Contribution by contractors to the US Veterans Health Administration
 * during this period are contractually contributed under the
 * Apache License, Version 2.0.
 *
 * See: https://www.usa.gov/government-works
 * 
 * Contributions prior to 2013:
 *
 * Copyright (C) International Health Terminology Standards Development Organisation.
 * Licensed under the Apache License, Version 2.0.
 *
 */



package sh.isaac.api.coordinate;

import sh.isaac.api.Get;
import sh.isaac.api.bootstrap.TermAux;
import sh.isaac.api.chronicle.LatestVersion;
import sh.isaac.api.component.concept.ConceptChronology;
import sh.isaac.api.component.concept.ConceptSpecification;
import sh.isaac.api.component.semantic.version.LogicGraphVersion;
import sh.isaac.api.logic.LogicalExpression;
import sh.isaac.api.util.UUIDUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * ImmutableCoordinate to manage the retrieval and display of logic information.
 *
 * Created by kec on 2/16/15.
 */
public interface LogicCoordinate {
    /**
     * 
     * @return a content based uuid, such that identical logic coordinates
     * will have identical uuids, and that different logic coordinates will 
     * always have different uuids.
     */
    default UUID getLogicCoordinateUuid() {
       ArrayList<UUID> uuidList = new ArrayList();
       UUIDUtil.addSortedUuids(uuidList, getClassifierNid());
       UUIDUtil.addSortedUuids(uuidList, getDescriptionLogicProfileNid());
       UUIDUtil.addSortedUuids(uuidList, getInferredAssemblageNid());
       UUIDUtil.addSortedUuids(uuidList, getStatedAssemblageNid());
       UUIDUtil.addSortedUuids(uuidList, getConceptAssemblageNid());
       return UUID.nameUUIDFromBytes(uuidList.toString().getBytes());
   }
   /**
    * Gets the classifier nid.
    *
    * @return concept nid for the classifier for this coordinate.
    */
   int getClassifierNid();

   default ConceptSpecification getClassifier() {
      return Get.conceptSpecification(getClassifierNid());
   }

   /**
    * Gets the description logic profile nid.
    *
    * @return concept nid for the description-logic profile for this coordinate.
    */
   int getDescriptionLogicProfileNid();

   default ConceptSpecification getDescriptionLogicProfile() {
      return Get.conceptSpecification(getDescriptionLogicProfileNid());
   }
   /**
    * Gets the inferred assemblage nid.
    *
    * @return concept nid for the assemblage where the inferred logical form
    * of concept definition graphs are stored.
    */
   int getInferredAssemblageNid();

   default ConceptSpecification getInferredAssemblage() {
      return Get.conceptSpecification(getInferredAssemblageNid());
   }
   /**
    * Gets the stated assemblage nid.
    *
    * @return concept nid for the assemblage where the stated logical form
    * of concept definition graphs are stored.
    */
   int getStatedAssemblageNid();

   default ConceptSpecification getStatedAssemblage() {
      return Get.conceptSpecification(getStatedAssemblageNid());
   }

   /**
    * 
    * @return the nid for the assemblage within which the concepts to be classified are defined within. 
    */
   int getConceptAssemblageNid();
   default ConceptSpecification getConceptAssemblage() {
      return Get.conceptSpecification(getConceptAssemblageNid());
   }


   /**
    *
    * @return the nid of the concept identifying the digraph generated by classifying according to this logic coordinate.
    */
   default int getDigraphIdentityNid() {
      return TermAux.EL_PLUS_PLUS_DIGRAPH.getNid();
   }

   /**
    *
    * @return the concept identifying the digraph generated by classifying according to this logic coordinate.
    */
   default ConceptSpecification getDigraphIdentity() {
      return Get.conceptSpecification(getDigraphIdentityNid());
   }

   default Optional<LogicalExpression> getStatedLogicalExpression(ConceptSpecification spec, StampFilter stampFilter) {
      return getStatedLogicalExpression(spec.getNid(), stampFilter);
   }

   default Optional<LogicalExpression> getStatedLogicalExpression(int conceptNid, StampFilter stampFilter) {
      return getLogicalExpression(conceptNid, PremiseType.STATED, stampFilter);
   }

   default Optional<LogicalExpression> getInferredLogicalExpression(ConceptSpecification spec, StampFilter stampFilter) {
      return getInferredLogicalExpression(spec.getNid(), stampFilter);
   }

   default Optional<LogicalExpression> getInferredLogicalExpression(int conceptNid, StampFilter stampFilter) {
      return getLogicalExpression(conceptNid, PremiseType.INFERRED, stampFilter);
   }

   default Optional<LogicalExpression> getLogicalExpression(int conceptNid, PremiseType premiseType, StampFilter stampFilter) {

      int assemblageSequence;

      if (premiseType == PremiseType.INFERRED) {
         assemblageSequence = getInferredAssemblageNid();
      } else {
         assemblageSequence = getStatedAssemblageNid();
      }
      List<LatestVersion<LogicGraphVersion>> latestVersionList = Get.assemblageService()
              .getSnapshot(LogicGraphVersion.class, stampFilter)
              .getLatestSemanticVersionsForComponentFromAssemblage(conceptNid, assemblageSequence);
      if (latestVersionList.isEmpty()) {
         return Optional.empty();
      }
      LatestVersion<LogicGraphVersion> logicalDef = Get.assemblageService()
              .getSnapshot(LogicGraphVersion.class, stampFilter)
              .getLatestSemanticVersionsForComponentFromAssemblage(conceptNid, assemblageSequence).get(0);

      if (logicalDef.isPresent()) {
         return Optional.of(logicalDef.get().getLogicalExpression());
      }
      return Optional.empty();
   }

   default LatestVersion<LogicGraphVersion> getStatedLogicGraphVersion(int conceptNid, StampFilter stampFilter) {
      return getLogicGraphVersion(conceptNid, PremiseType.STATED, stampFilter);
   }

   default LatestVersion<LogicGraphVersion> getInferredLogicGraphVersion(ConceptSpecification conceptSpecification, StampFilter stampFilter) {
      return getLogicGraphVersion(conceptSpecification.getNid(), PremiseType.INFERRED, stampFilter);
   }

   default LatestVersion<LogicGraphVersion> getStatedLogicGraphVersion(ConceptSpecification conceptSpecification, StampFilter stampFilter) {
      return getLogicGraphVersion(conceptSpecification.getNid(), PremiseType.STATED, stampFilter);
   }

   default LatestVersion<LogicGraphVersion> getInferredLogicGraphVersion(int conceptNid, StampFilter stampFilter) {
      return getLogicGraphVersion(conceptNid, PremiseType.INFERRED, stampFilter);
   }

   default LatestVersion<LogicGraphVersion> getLogicGraphVersion(int conceptNid, PremiseType premiseType, StampFilter stampFilter) {
      ConceptChronology concept = Get.concept(conceptNid);
      return concept.getLogicalDefinition(stampFilter, premiseType, this);
   }

   default String toUserString() {
      StringBuilder sb = new StringBuilder("   stated assemblage: ");
      sb.append(Get.conceptDescriptionText(this.getStatedAssemblageNid()));
      sb.append("\n   inferred assemblage: ");
      sb.append(Get.conceptDescriptionText(this.getInferredAssemblageNid()));
      sb.append("\n   profile: ");
      sb.append(Get.conceptDescriptionText(this.getDescriptionLogicProfileNid()));
      sb.append("\n   classifier: ");
      sb.append(Get.conceptDescriptionText(this.getClassifierNid()));
      sb.append("\n   computed digraph: ");
      sb.append(Get.conceptDescriptionText(this.getDigraphIdentityNid()));

      return sb.toString();
   }

   default int getRootNid() {
      return TermAux.SOLOR_ROOT.getNid();
   }

   default ConceptSpecification getRoot() {
      return TermAux.SOLOR_ROOT;
   }
   LogicCoordinateImmutable toLogicCoordinateImmutable();

}

